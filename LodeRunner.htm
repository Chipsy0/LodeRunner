<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Lode Runner par Caroline Chagnon et Razvan Pruteanu</title>
    <link rel="stylesheet" type="text/css" href="StyleProjet1.css" />
    <!-- Code JavaScript local -->
    <script type="text/javascript" src="initTableau.js"></script>
    <script type="text/javascript" src="deplacerRunner.js"></script>
    <script type="text/javascript">
        var objCanvas = null;
        var objC2D = null;
        var objCycleAnimation = null;
        var objRunner = null;
        var tabTableau = null;
        var tabObjets = null;
        var binEnMouvementX = false;
        var binMouvementDOWN = false;
        var binMouvementUP = false;
        var binFall = false;
        var binMouvementLeft = false;
        var binMouvementRight = false;
        var intScore = 0;
        var objDateDebut = null;
        var binCommence = false;
        var intMillisecondesTot = 0;
        var intSecondes = 0;
        var intMinutes = 0;
        var intNiveau = 1;
        var intNbVies = 5;
        var fltAnim = 0;
        var binInverseAnim = false;

        function initAnimation() {
            objCanvas = document.getElementById('monCanvas');
            objCanvas.focus();
            objC2D = objCanvas.getContext('2d');
            tabObjets = new Array(22);
            for (var i = 0; i < tabObjets.length; i++) {
                tabObjets[i] = new Array(30);
            }

            initRunner();
            initTableau();
            dessiner(); // Dessiner une première fois
            animer();  // animer
        }

        // Construire les passerelles
        function initPasserelles(intY, intX) {
            var objPasserelle = new Object();
            objPasserelle.strCouleurPrim = '#8E443D';
            objPasserelle.strCouleurSec = '#441F1E';
            objPasserelle.intLargeur = 30;
            objPasserelle.intHauteur = 30;
            objPasserelle.intX = intX;
            objPasserelle.intY = intY;
            tabObjets[intY][intX] = objPasserelle;
        }

        // Construire les échelles
        function initEchelles(intY, intX) {
            var objEchelle = new Object();
            objEchelle.strCouleurPrim = "#FF9900";
            objEchelle.strCouleurSec = "#ffd900";
            objEchelle.intX = intX;
            objEchelle.intY = intY;
            objEchelle.intHauteur = 30;
            tabObjets[intY][intX] = objEchelle;
        }

        // Construire les lingots d'or
        function initLingots(intY, intX) {
            var objLingot = new Object();
            objLingot.strCouleurPrim = "#ffd900";
            objLingot.strCouleurSec = "#c48900";
            objLingot.intX = intX;
            objLingot.intY = intY;
            objLingot.intLargeur = 30;
            objLingot.intHauteur = 11.5;
            tabObjets[intY][intX] = objLingot;
        }

        // Construire les cordes
        function initCorde(intY, intX) {
            var objCorde = new Object();
            objCorde.strCouleur = "#ffd900";
            objCorde.intX = intX;
            objCorde.intY = intY;
            objCorde.intLargeur = 30;
            objCorde.intHauteur = 2.5;
            tabObjets[intY][intX] = objCorde;
        }

        // Construire le sol
        function initSol(intY, intX) {
            var objSol = new Object();
            objSol.strCouleur = 'gray';
            objSol.intX = intX;
            objSol.intY = intY;
            objSol.intLargeur = 30;
            objSol.intHauteur = 30;
            tabObjets[intY][intX] = objSol;
        }

        // Construire le panneau
        function initPanneau(intY, intX) {
            objPanneau = new Object();
            objPanneau.strCouleur = 'black';
            objPanneau.intX = intX;
            objPanneau.intY = intY;
            objPanneau.intLargeur = 30;
            objPanneau.intHauteur = 30;
            tabObjets[intY][intX] = objPanneau;
        }

        // Construire le runner
        function initRunner() {
            objRunner = new Object();
            objRunner.strCouleur = 'black';
            objRunner.intLargeur = 18;
            objRunner.intHauteur = 28;
            objRunner.intX = 15 * 30;
            objRunner.intY = (16 * 30) - objRunner.intHauteur;
            objRunner.intDirectionX = 1;
            objRunner.intDirectionY = 1;
            objRunner.intLargeurTab = (objRunner.intLargeur) / 30;
            objRunner.intHauteurTab = (objRunner.intHauteur) / 30;
            objRunner.intVitesse = objCanvas.width / 700;
        }

        // Construire les murs
        function initMurs(intY, intX) {
            objMur = new Object();
            objMur.strCouleur = '#0b2b02';
            objMur.intX = intX;
            objMur.intY = intY;
            objMur.intLargeur = 30;
            objMur.intHauteur = 30;
            tabObjets[intY][intX] = objMur;
        }

        // Construire le panneau
        function initPanneau(intY, intX) {
            objPanneau = new Object();
            objPanneau.strCouleur = 'black';
            objPanneau.intX = intX;
            objPanneau.intY = intY;
            objPanneau.intLargeur = 30;
            objPanneau.intHauteur = 30;
            tabObjets[intY][intX] = objPanneau;
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();
        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {

        }


        // Pour dessiner le tableau
        function dessiner() {
            for (var i = 0; i < tabTableau.length; i++) {
                for (var j = 0; j < tabTableau[i].length; j++) {
                    switch (tabTableau[i][j]) {
                        case 1:
                            dessinerPasserelles(i, j);
                            break;

                        case 2:
                            dessinerEchelles(i, j);
                            break;

                        case 3:
                            dessinerLingots(i, j);
                            break;

                        case 4:
                            dessinerSol(i, j);
                            break;

                        case 5:
                            dessinerCordes(i, j);
                            break;

                        case 6:
                            dessinerMurs(i, j);
                            break;

                        case 7:
                            dessinerPanneau(i, j);
                            break;
                    }
                }
            }
            dessinerTitre();
            dessinerDonnees();
            dessinerRunner();

        }

        // Pour dessiner les passerelles
        function dessinerPasserelles(intY, intX) {
            objC2D.save();
            var objPasserelle = tabObjets[intY][intX];
            intPosX = objPasserelle.intX * 30;
            intPosY = objPasserelle.intY * 30;
            objC2D.fillStyle = objPasserelle.strCouleurPrim;
            objC2D.fillRect(intPosX, intPosY, objPasserelle.intLargeur, objPasserelle.intHauteur);
            objC2D.strokeStyle = objPasserelle.strCouleurSec;
            objC2D.fillStyle = objPasserelle.strCouleurSec;
            objC2D.lineWidth = 2;
            objC2D.translate(intPosX, intPosY);
            objC2D.strokeRect(1, 0, objPasserelle.intLargeur - 2, objPasserelle.intHauteur / 2);
            objC2D.beginPath();
            objC2D.moveTo(0, objPasserelle.intHauteur);
            objC2D.lineTo(objPasserelle.intLargeur, objPasserelle.intHauteur);
            objC2D.stroke();
            objC2D.beginPath();
            objC2D.moveTo(objPasserelle.intLargeur / 2, objPasserelle.intHauteur / 2);
            objC2D.lineTo(objPasserelle.intLargeur / 2, objPasserelle.intHauteur);
            objC2D.stroke();
            objC2D.fillRect(objPasserelle.intLargeur / 2, objPasserelle.intHauteur / 2, 3, objPasserelle.intHauteur / 2);
            objC2D.restore();
        }

        // Pour dessiner les échelles
        function dessinerEchelles(intY, intX) {
            objC2D.save();
            var objEchelle = tabObjets[intY][intX];
            intPosX = objEchelle.intX * 30;
            intPosY = objEchelle.intY * 30;

            objC2D.fillStyle = objEchelle.strCouleurPrim;
            objC2D.fillRect(intPosX, intPosY, 5, 30);
            objC2D.fillRect(intPosX + 25, intPosY, 5, 30);
            objC2D.restore();

            objC2D.fillStyle = objEchelle.strCouleurSec;
            objC2D.fillRect(intPosX + 3, intPosY + 2, 30 - 6, 2);
            objC2D.fillRect(intPosX + 3, intPosY + objEchelle.intHauteur / 4 + 2, 30 - 6, 2);
            objC2D.fillRect(intPosX + 3, intPosY + 2 * objEchelle.intHauteur / 4 + 2, 30 - 6, 2);
            objC2D.fillRect(intPosX + 3, intPosY + 3 * objEchelle.intHauteur / 4 + 2, 30 - 6, 2);
        }

        // Pour dessiner les lingots d'or
        function dessinerLingots(intY, intX) {
            objC2D.save();
            var objLingot = tabObjets[intY][intX];
            intPosX = objLingot.intX * 30;
            intPosY = objLingot.intY * 30;
            objC2D.translate(0, 30 - objLingot.intHauteur);
            objC2D.fillStyle = objLingot.strCouleurPrim;
            objC2D.strokeStyle = objLingot.strCouleurSec;
            objC2D.lineWidth = 1.5;
            objC2D.fillRect(intPosX + objLingot.intLargeur / 6, intPosY - 2.25, 2 * objLingot.intLargeur / 3, objLingot.intHauteur / 2);
            objC2D.strokeRect(intPosX + objLingot.intLargeur / 6, intPosY - 2.25, 2 * objLingot.intLargeur / 3, objLingot.intHauteur / 2);
            objC2D.fillRect(intPosX, intPosY + objLingot.intHauteur / 2 - 1.5, objLingot.intLargeur, objLingot.intHauteur / 2);
            objC2D.strokeRect(intPosX, intPosY + objLingot.intHauteur / 2 - 1.5, objLingot.intLargeur, objLingot.intHauteur / 2);
            objC2D.fillStyle = "white";
            objC2D.fillRect(intPosX + 5 * objLingot.intLargeur / 6 - 11.5, intPosY - 1.5, 10, 2);
            objC2D.fillRect(intPosX + objLingot.intLargeur - 9.5, intPosY + objLingot.intHauteur / 2, 8, 1.5);
            objC2D.restore();
        }

        // Pour dessiner les cordes
        function dessinerCordes(intY, intX) {
            objC2D.save();
            var objCorde = tabObjets[intY][intX];
            intPosX = objCorde.intX * 30;
            intPosY = objCorde.intY * 30;
            objC2D.fillStyle = objCorde.strCouleur;
            objC2D.fillRect(intPosX, intPosY + 4, objCorde.intLargeur, objCorde.intHauteur);
            objC2D.restore();
        }


        // Pour dessiner le sol
        function dessinerSol(intY, intX) {
            objC2D.save();
            var objSol = tabObjets[intY][intX];
            intPosX = objSol.intX * 30;
            intPosY = objSol.intY * 30;
            objC2D.strokeStyle = '#3d3c3b';
            objC2D.lineWidth = 2;
            objC2D.fillStyle = objSol.strCouleur;
            objC2D.beginPath();
            objC2D.fillRect(intPosX, intPosY, objSol.intLargeur, objSol.intHauteur);
            objC2D.strokeRect(intPosX + 1, intPosY + 1, objSol.intLargeur - 2, objSol.intHauteur - 2);
            objC2D.closePath();
            objC2D.restore();
        }

        // Pour dessiner les murs
        function dessinerMurs(intY, intX) {
            objC2D.save();
            var objMur = tabObjets[intY][intX];
            intPosX = objMur.intX * 30;
            intPosY = objMur.intY * 30;
            objC2D.fillStyle = objMur.strCouleur;
            objC2D.fillRect(intPosX, intPosY, objMur.intLargeur, objMur.intHauteur);
            objC2D.restore();
        }

        // Pour dessiner le panneau
        function dessinerPanneau(intY, intX) {
            objC2D.save();
            var objPanneau = tabObjets[intY][intX];
            intPosX = objPanneau.intX * 30;
            intPosY = objPanneau.intY * 30;
            objC2D.fillStyle = objPanneau.strCouleur;
            objC2D.fillRect(intPosX, intPosY, objPanneau.intLargeur, objPanneau.intHauteur);
            objC2D.restore();
        }

        // Pour inscrire le titre
        function dessinerTitre() {
            objC2D.save();
            objC2D.fillStyle = "#46753e";
            objC2D.font = '30px Impact';
            objC2D.textAlign = 'center';
            objC2D.fillText("Lode Runner", objCanvas.width / 2, 26);
            objC2D.fillText("par Caroline Chagnon et Razvan Pruteanu", objCanvas.width / 2, objCanvas.height - 4);
            objC2D.restore();
        }

        // Pour incrire les données
        function dessinerDonnees() {
            objC2D.save();
            objC2D.fillStyle = "#ffd900";
            objC2D.font = '35px Impact';
            objC2D.textAlign = 'left';
            objC2D.fillText("Score: " + intScore.toString().padStart(7, '0'), 60, objCanvas.height - 60);
            objC2D.fillText("Temps: " + intMinutes.toString().padStart(2, '0') + ':' + intSecondes.toString().padStart(2, '0'), 330, objCanvas.height - 60);
            objC2D.fillText("Niveau: " + intNiveau, 570, objCanvas.height - 60);
            objC2D.fillText("Vies: " + intNbVies, 740, objCanvas.height - 60);
            objC2D.restore();
        }

        // Pour dessiner le runner
        function dessinerRunner() {
            objC2D.save();
            intPosX = objRunner.intX;
            intPosY = objRunner.intY;
            objC2D.globalAlpha = 0.2;
            objC2D.fillStyle = objRunner.strCouleur;
            if (fltAnim > 3) {
                binInverseAnim = true;
            }
            if (fltAnim < -3){
                binInverseAnim = false;
            }
            if (binInverseAnim == false) {
                fltAnim += 0.65;
            }
            else {
                fltAnim -= 0.65;
            }
            if (binMouvementUP == true || binMouvementDOWN == true) {
                objC2D.fillRect(intPosX, intPosY, objRunner.intLargeur, objRunner.intHauteur);
                objC2D.globalAlpha = 1;
                objC2D.translate(intPosX, intPosY);
                objC2D.fillRect(objRunner.intLargeur / 2 - 3, 0, 6, 6); // tête
                objC2D.fillStyle = '#FF1A1A';
                objC2D.fillRect(objRunner.intLargeur / 2 - 1.5, 6, 3, 2); // cou
                objC2D.fillStyle = 'white';
                objC2D.fillRect(objRunner.intLargeur / 2 - 3, 8, 6, 13); // corps
                objC2D.fillStyle = '#FF1A1A';
                objC2D.fillRect(3, 17 + fltAnim/2, 4, 4); // jambe gauche
                objC2D.fillRect(0, 21 + fltAnim/2, 4, 4); // jambe gauche
                objC2D.fillRect(objRunner.intLargeur - 7, 17 - fltAnim/2, 4, 4); // jambe droite
                objC2D.fillRect(objRunner.intLargeur - 4, 21 - fltAnim/2, 4, 4); // jambe droite
                objC2D.fillRect(objRunner.intLargeur / 2 - 6, 8, 4, 4); // bras gauche
                objC2D.fillRect(0, 7 - fltAnim, 4, 4); // bras gauche
                objC2D.fillRect(objRunner.intLargeur / 2 + 2, 8, 4, 4); // bras droit
                objC2D.fillRect(objRunner.intLargeur - 4, 7 + fltAnim, 4, 4); // bras droit
                objC2D.restore();
            }
            else if (binMouvementLeft == true) {
                objC2D.fillRect(intPosX, intPosY, objRunner.intLargeur, objRunner.intHauteur);
                objC2D.globalAlpha = 1;
                objC2D.translate(intPosX, intPosY);
                objC2D.fillStyle = '#C91515';
                objC2D.fillRect(objRunner.intLargeur / 2 - 0.5, 6, 3, 2); // cou

                objC2D.fillRect(objRunner.intLargeur / 2 - 2 - fltAnim, 8 - 3/4 - fltAnim/4, 4, 4); // bras gauche
                objC2D.fillRect(objRunner.intLargeur / 2 - 2 - 2.5*fltAnim, 10 - fltAnim/2, 4, 4); // bras gauche

                objC2D.fillRect(objRunner.intLargeur/2 + fltAnim, 18 - fltAnim/3, 4, 6); // jambe gauche
                objC2D.fillRect(objRunner.intLargeur/2 + 2*fltAnim, 24 - 2 - 2*fltAnim/3, 4, 4); // jambe gauche
                objC2D.fillStyle = 'white';
                objC2D.fillRect(objRunner.intLargeur / 2 - 1, 8 + fltAnim/6, 6, 12); // corps
                objC2D.fillStyle = '#FF1A1A';
                objC2D.fillRect(objRunner.intLargeur / 2 - 2+ fltAnim, 8 + 3/4 + fltAnim/4, 4, 4); // bras droit
                objC2D.fillRect(objRunner.intLargeur / 2 - 2 + 2.5*fltAnim, 10 +fltAnim/2, 4, 4); // bras droit

                objC2D.fillRect(objRunner.intLargeur/2 - fltAnim, 18 - fltAnim/3, 4, 6); // jambe droite
                objC2D.fillRect(objRunner.intLargeur/2 - 2*fltAnim, 24 - 2 - 2*fltAnim/3, 4, 4); // jambe droite
                objC2D.fillStyle = 'black';
                objC2D.fillRect(objRunner.intLargeur / 2 - 1, 1/2 + fltAnim/6, 6, 6); // tête
                objC2D.restore();
            }
            else {
                objC2D.fillRect(intPosX, intPosY, objRunner.intLargeur, objRunner.intHauteur);
                objC2D.globalAlpha = 1;
                objC2D.translate(intPosX, intPosY);
                objC2D.fillRect(objRunner.intLargeur / 2 - 3, 0, 6, 6); // tête
                objC2D.fillStyle = '#FF1A1A';
                objC2D.fillRect(objRunner.intLargeur / 2 - 1.5, 6, 3, 2); // cou
                objC2D.fillStyle = 'white';
                objC2D.fillRect(objRunner.intLargeur / 2 - 3, 8, 6, 13); // corps
                objC2D.fillStyle = '#FF1A1A';
                objC2D.fillRect(3, 20, 4, 4); // jambe gauche
                objC2D.fillRect(0, 24, 4, 4); // jambe gauche
                objC2D.fillRect(objRunner.intLargeur - 7, 20, 4, 4); // jambe droite
                objC2D.fillRect(objRunner.intLargeur - 4, 24, 4, 4); // jambe droite
                objC2D.fillRect(objRunner.intLargeur / 2 - 6, 8, 4, 4); // bras gauche
                objC2D.fillRect(0, 11, 4, 4); // bras gauche
                objC2D.fillRect(objRunner.intLargeur / 2 + 2, 8, 4, 4); // bras droit
                objC2D.fillRect(objRunner.intLargeur - 4, 11, 4, 4); // bras droit
                objC2D.restore();
            }


        }

        // Pour debuter le chrono
        function debutChrono() {
            objDateDebut = new Date();
            binCommence = true;
            intMillisecondesTot = 0;
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();
        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {

            if (binCommence == true) {
                var objDateMaintenant = new Date();
                var intMilEcoulees = objDateMaintenant - objDateDebut;
                objDateDebut = objDateMaintenant;

                intMillisecondesTot += intMilEcoulees;
                intMinutes = Math.floor(intMillisecondesTot / 1000 / 60);
                intSecondes = Math.floor(intMillisecondesTot / 1000) - intMinutes * 60;
            }

            //mouvement droit et gauche
            if (binFall == false) {
                if (binMouvementLeft == true || binMouvementRight == true) {
                    if (binMouvementLeft == true) {
                        if ((tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] != 6
                            || tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] == 5)
                            && tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] != 1
                            && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab - 1 / 30)][Math.floor(objRunner.intX / 30)] != 1) {
                            objRunner.intX += objRunner.intDirectionX * objRunner.intVitesse;
                        }
                    }
                    if (binMouvementRight == true) {
                        if ((tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] != 6
                            || tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 5)
                            && (tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] != 1
                                && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab - 1 / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] != 1)) {

                            objRunner.intX += objRunner.intDirectionX * objRunner.intVitesse;
                        }
                    }
                    if ((tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30)] == 0
                        && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 0)
                        && (tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] == 0
                            && tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 0)) {
                        binFall = true;
                    }
                }
                //mouvement bas et haut
                if (binMouvementUP == true || binMouvementDOWN == true) {
                    if ((tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] == 2
                        && tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 2)
                        || (tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30)] == 2
                            && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 2)) {

                        if (binMouvementUP == true) {
                            if (tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2
                                || tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab - 1 / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2) {
                                objRunner.intY -= objRunner.intDirectionY * objRunner.intVitesse;
                            }

                        } else {
                            if ((tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab + 3 / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] != 2
                                && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2)
                                || tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab + 3 / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2) {

                                objRunner.intY += objRunner.intDirectionY * objRunner.intVitesse;
                            }
                        }
                    }
                    if (binMouvementUP == false) {
                        if (tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] == 5
                            && tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 5
                            && (tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30)] == 0
                                && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 0)) {
                            binFall = true;
                        }
                    }

                }

                //tomber
            } else {
                objRunner.intY += 1 * objRunner.intVitesse;
                console.log("bruh");

                if ((tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30)] != 0
                    && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] != 0)
                    && (tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30)] != 3
                        && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] != 3)
                    && (tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30)] != 5
                        && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteurTab)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] != 5)) {
                    binFall = false;

                }

                if (tabTableau[Math.floor(objRunner.intY / 30 - 2 / 30)][Math.floor(objRunner.intX / 30)] == 5
                    && tabTableau[Math.floor(objRunner.intY / 30 - 2 / 30)][Math.floor(objRunner.intX / 30 + objRunner.intLargeurTab)] == 5) {

                    binFall = false;
                }
            }
        }

    </script>
</head>

<body onload="initAnimation()">
    <canvas id="monCanvas" width="900" height="660" tabIndex="1" class="sCanvas" onkeydown="deplacerRunner();"
        onkeyup='binMouvementLeft=false; binMouvementRight=false; binMouvementDOWN=false; binMouvementUP=false;'>
        Votre navigateur ne supporte pas la balise canvas
    </canvas>
</body>

</html>