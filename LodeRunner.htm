<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Lode Runner par Caroline Chagnon et Razvan Pruteanu</title>
    <link rel="stylesheet" type="text/css" href="StyleProjet1.css" />
    <!-- Code JavaScript local -->
    <script type="text/javascript">
        var objCanvas = null;
        var objC2D = null;
        var objCycleAnimation = null;
        var objRunner = null;
        var tabTableau = null;
        var tabObjets = null;
        var binEnMouvementX = false;
        var binEnMouvementY = false;
        var binMouvementUP = false;

        function initAnimation() {
            objCanvas = document.getElementById('monCanvas');
            objCanvas.focus();
            objC2D = objCanvas.getContext('2d');
            tabObjets = new Array(17);
            for (var i = 0; i < tabObjets.length; i++) {
                tabObjets[i] = new Array(28);
            }

            initRunner();
            initTableau();
            dessiner(); // Dessiner une première fois
            animer();  // animer
        }

        // Construire les passerelles
        function initPasserelles(intY, intX) {
            var objPasserelle = new Object();
            objPasserelle.strCouleurPrim = '#8E443D';
            objPasserelle.strCouleurSec = '#441F1E';
            objPasserelle.intLargeur = 30;
            objPasserelle.intHauteur = 30;
            objPasserelle.intX = intX;
            objPasserelle.intY = intY;
            tabObjets[intY][intX] = objPasserelle;
        }

        // Construire les echelles
        function initEchelles(intY, intX) {
            var objEchelle = new Object();
            objEchelle.strCouleurPrim = "#FF0000";
            objEchelle.strCouleurSec = "#FF9900";
            objEchelle.intX = intX;
            objEchelle.intY = intY;
            tabObjets[intY][intX] = objEchelle;
        }

        // Construire la corde
        function initCorde(intY, intX) {
            var objCorde = new Object();
            objCorde.strCouleur = '#441F1E';
            objCorde.intX = intX;
            objCorde.intY = intY;
            objCorde.intLargeur = 30;
            objCorde.intHauteur = 2.5;
            tabObjets[intY][intX] = objCorde;
        }

        // Construire le sol
        function initSol(intY, intX) {
            var objSol = new Object();
            objSol.strCouleur = 'gray';
            objSol.intX = intX;
            objSol.intY = intY;
            objSol.intLargeur = 30;
            objSol.intHauteur = 30;
            tabObjets[intY][intX] = objSol;
        }

        // Construire le runner
        function initRunner() {
            objRunner = new Object();
            objRunner.strCouleur = 'black';

            objRunner.intLargeur = 18;
            objRunner.intHauteur = 28;
            objRunner.intX = 14 * 30;
            objRunner.intY = (15 * 30) - objRunner.intHauteur;
            objRunner.intDirectionX = 1;
            objRunner.intDirectionY = 1;

            objRunner.intVitesse = Math.floor(objCanvas.width / 300);
        }

        function initTableau() {
            /*0 rien, 1 briques, 2 échelles, 3 lingots, 
            4 sol, 5 cordes*/

            tabTableau = new Array();
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0]);
            tabTableau.push([1, 1, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]);
            tabTableau.push([0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 3, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 3, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2]);
            tabTableau.push([0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]);
            tabTableau.push([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
            tabTableau.push([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]);

            for (var i = 0; i < tabTableau.length; i++) {
                for (var j = 0; j < tabTableau[i].length; j++) {
                    switch (tabTableau[i][j]) {
                        case 1:
                            initPasserelles(i, j);
                            break;

                        case 2:
                            initEchelles(i, j);
                            break;

                        case 3:

                            break;

                        case 4:
                            initSol(i, j);
                            break;

                        case 5:
                            initCorde(i, j);
                            break;

                    }
                }
            }
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();
        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {

        }


        // Pour dessiner le tableau
        function dessiner() {
            for (var i = 0; i < tabTableau.length; i++) {
                for (var j = 0; j < tabTableau[i].length; j++) {
                    switch (tabTableau[i][j]) {
                        case 1:
                            dessinerPasserelles(i, j);
                            break;

                        case 2:
                            dessinerEchelles(i, j);
                            break;



                        case 4:
                            dessinerSol(i, j);
                            break;

                        case 5:
                            dessinerCorde(i, j);
                            break;

                    }
                }
            }
            dessinerRunner();

        }

        // Pour dessiner les passerelles
        function dessinerPasserelles(intY, intX) {
            objC2D.save();
            var objPasserelle = tabObjets[intY][intX];
            intPosX = objPasserelle.intX * 30;
            intPosY = objPasserelle.intY * 30;
            objC2D.fillStyle = objPasserelle.strCouleurPrim;
            objC2D.fillRect(intPosX, intPosY, objPasserelle.intLargeur, objPasserelle.intHauteur);
            objC2D.strokeStyle = objPasserelle.strCouleurSec;
            objC2D.fillStyle = objPasserelle.strCouleurSec;
            objC2D.lineWidth = 2;
            objC2D.translate(intPosX, intPosY);
            objC2D.strokeRect(1, 0, objPasserelle.intLargeur - 2, objPasserelle.intHauteur / 2);
            objC2D.beginPath();
            objC2D.moveTo(0, objPasserelle.intHauteur);
            objC2D.lineTo(objPasserelle.intLargeur, objPasserelle.intHauteur);
            objC2D.stroke();
            objC2D.beginPath();
            objC2D.moveTo(objPasserelle.intLargeur / 2, objPasserelle.intHauteur / 2);
            objC2D.lineTo(objPasserelle.intLargeur / 2, objPasserelle.intHauteur);
            objC2D.stroke();
            objC2D.fillRect(objPasserelle.intLargeur / 2, objPasserelle.intHauteur / 2, 3, objPasserelle.intHauteur / 2);
            objC2D.restore();
        }

        // Pour dessiner les echelles
        function dessinerEchelles(intY, intX) {
            objC2D.save();
            var objEchelle = tabObjets[intY][intX];
            intPosX = objEchelle.intX * 30;
            intPosY = objEchelle.intY * 30;

            objC2D.fillStyle = objEchelle.strCouleurPrim;
            objC2D.fillRect(intPosX, intPosY + 2, 30, 2);
            objC2D.fillRect(intPosX, intPosY + 9, 30, 2);
            objC2D.fillRect(intPosX, intPosY + 16, 30, 2);
            objC2D.fillRect(intPosX, intPosY + 24, 30, 2);

            objC2D.fillStyle = objEchelle.strCouleurSec;
            objC2D.fillRect(intPosX, intPosY, 5, 30);
            objC2D.fillRect(intPosX + 25, intPosY, 5, 30);
            objC2D.restore();
        }

        // Pour dessiner la corde
        function dessinerCorde(intY, intX) {
            objC2D.save();
            var objCorde = tabObjets[intY][intX];
            intPosX = objCorde.intX * 30;
            intPosY = objCorde.intY * 30;
            objC2D.fillStyle = objCorde.strCouleur;
            objC2D.fillRect(intPosX, intPosY + 4, objCorde.intLargeur, objCorde.intHauteur);
            objC2D.restore();
        }


        // Pour dessiner le sol
        function dessinerSol(intY, intX) {
            objC2D.save();
            var objSol = tabObjets[intY][intX];
            intPosX = objSol.intX * 30;
            intPosY = objSol.intY * 30;
            objC2D.strokeStyle = '#3d3c3b';
            objC2D.lineWidth = 4;
            objC2D.fillStyle = objSol.strCouleur;
            objC2D.fillRect(intPosX, intPosY, objSol.intLargeur, objSol.intHauteur);
            objC2D.strokeRect(intPosX, intPosY, objSol.intLargeur, objSol.intHauteur);
            objC2D.restore();
        }

        // Pour dessiner le runner
        function dessinerRunner() {
            objC2D.save();
            intPosX = objRunner.intX;
            intPosY = objRunner.intY;
            objC2D.fillStyle = objRunner.strCouleur;
            objC2D.fillRect(intPosX, intPosY, objRunner.intLargeur, objRunner.intHauteur);
            objC2D.restore();
        }

        // Pour déplacer le Runner
        function deplacerRunner() {

            switch (event.keyCode) {
                case 39: // Flèche-à-droite      
                    binEnMouvementX = true;
                    objRunner.intDirectionX = 1;
                    break;

                case 37: // Flèche-à-gauche
                    binEnMouvementX = true;
                    objRunner.intDirectionX = -1;
                    break;

                case 38: // Flèche-en-haut                    
                    binEnMouvementY = true;
                    binMouvementUP = true;
                    objRunner.intDirectionY = 1;
                    break;

                case 40: // Flèche-en-bas
                    binEnMouvementY = true;
                    binMouvementUP = false;
                    objRunner.intDirectionY = 1;
                    break;
            }


        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();
        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {
            if (binEnMouvementX == true) {
                objRunner.intX += objRunner.intDirectionX * objRunner.intVitesse;

            }
            if (binEnMouvementY == true) {
                if ((tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30)] == 2 
                   && tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30  + (objRunner.intLargeur)/30)] == 2)                  
                   ||(tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteur / 30)][Math.floor(objRunner.intX / 30)] == 2 
                   && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteur / 30)][Math.floor(objRunner.intX / 30  + (objRunner.intLargeur)/30)] == 2)) {
                    if (binMouvementUP == true) {
                        
                        if (tabTableau[Math.floor(objRunner.intY / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2
                            || tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteur / 30 - 1 / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2) {
                            objRunner.intY -= objRunner.intDirectionY * objRunner.intVitesse;
                        }

                    } else {

                        if ((tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteur / 30 + 3 / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] != 2
                            && tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteur / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2)
                            || tabTableau[Math.floor(objRunner.intY / 30 + objRunner.intHauteur / 30 + 3 / 30)][Math.floor(objRunner.intX / 30 + (objRunner.intLargeur / 2) / 30)] == 2) {
                            objRunner.intY += objRunner.intDirectionY * objRunner.intVitesse;
                        }
                    }

                }
            }
        }


    </script>
</head>

<body onload="initAnimation()">
    <canvas id="monCanvas" width="750" height="510" tabIndex="1" class="sCanvas" onkeydown="deplacerRunner();"
        onkeyup='binEnMouvementX=false; binEnMouvementY=false;'>
        Votre navigateur ne supporte pas la balise canvas
    </canvas>
</body>

</html>