<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Lode Runner par Caroline Chagnon et Razvan Pruteanu</title>
    <link rel="stylesheet" type="text/css" href="StyleProjet1.css" />
    <!-- Code JavaScript local -->
    <script type="text/javascript">
        var objCanvas = null;
        var objC2D = null;
        var objCycleAnimation = null;

        var tabTableau = null;
        var tabObjets = null;

        function initAnimation() {
            objCanvas = document.getElementById('monCanvas');
            objCanvas.focus();
            objC2D = objCanvas.getContext('2d');
            console.log(tabObjets);
            tabObjets = new Array(17);
            for (var i = 0; i < tabObjets.length; i++){
                tabObjets[i] = new Array(28);
            }
            console.log(tabObjets);
            //initPasserelles();
            //initMurs();
            //initBarres();
            initTableau();
            //initSons();
            //initPointage();
            //initTrajetBalle();
            dessiner(); // Dessiner une première fois
            //animer();  // animer
        }

        // Construire les passerelles
        function initPasserelles(intY,intX) {
            var objPasserelle = new Object();
            objPasserelle.strCouleurPrim = '#8E443D';
            objPasserelle.strCouleurSec = '#441F1E';
            objPasserelle.intLargeur = 30;
            objPasserelle.intHauteur = 30;
            objPasserelle.intX = intX;
            objPasserelle.intY = intY;
            console.log(tabObjets[intY]);
            tabObjets[intY][intX] = objPasserelle;
        }

        function initTableau() {
            /*0 nothing, 1 bricks, 2 ladders, 3 gold, 
            4 just bottom part legend so you know you can remove this, 5 rope shit*/

            tabTableau = new Array();
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0]);
            tabTableau.push([1, 1, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]);
            tabTableau.push([0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 0, 0, 3, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 3, 0, 0, 0]);
            tabTableau.push([0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2]);
            tabTableau.push([0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]);
            tabTableau.push([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
            tabTableau.push([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]);
            console.log(tabTableau);

            for (var i = 0; i < tabTableau.length; i++) {
                for (var j = 0; j < tabTableau[i].length; j++) {
                    console.log(tabTableau[i][j]);
                    switch (tabTableau[i][j]) {
                        case 1:
                            initPasserelles(i,j);
                            break;
                    }
                }
            }
        }

        // Construire les sons
        function initSons() {
            objSons = new Object();

            var objSon = document.createElement('audio');
            objSon.setAttribute('src', 'SonBalleMur.mp3');
            objSon.load();
            objSons.balleMur = objSon;

            objSon = document.createElement('audio');
            objSon.setAttribute('src', 'SonBallePerdue.mp3');
            objSon.load();
            objSons.ballePerdue = objSon;

            objSon = document.createElement('audio');
            objSon.setAttribute('src', 'SonDisparitionVortex.mp3');
            objSon.load();
            objSons.disparitionVortex = objSon;

            objSon = document.createElement('audio');
            objSon.setAttribute('src', 'SonBalleBaton.mp3');
            objSon.load();
            objSons.balleBaton = objSon;
        }

        // Construire les cartes de pointage
        function initPointage() {
            objPointage = new Object();
            objPointage.intX = tabObjMurs[0].intXFin + 4;
            objPointage.intY = objBaton.intY + objBaton.intHauteur + 4;
            objPointage.intLargeur = tabObjMurs[2].intXFin - objPointage.intX;
            objPointage.intHauteur = objCanvas.height - objPointage.intY - 4;

            objPointage.intNbBallesRestantes = 15;
            objPointage.intNbBallesPerdues = 0;
            objPointage.intNbBallesVortex = 0;

            var objImage = new Image();
            objImage.src = 'balle.jpg';
            objPointage.objImageBalle = objImage;

            objImage = new Image();
            objImage.src = 'vortex.jpg';
            objPointage.objImageVortex = objImage;

            objImage = new Image();
            objImage.src = 'Perdu.jpg';
            objPointage.objImagePerdu = objImage;
        }

        function initTrajetBalle() {

            objTrajetBalle = new Object();
            objTrajetBalle.tabPositions = new Array();
            objTrajetBalle.couleur = 'lightgreen';
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();
        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {

        }


        // Pour dessiner le tableau
        function dessiner() {
            
            
            for (var i = 0; i < tabTableau.length; i++) {
                for (var j = 0; j < tabTableau[i].length; j++) {
                    switch (tabTableau[i][j]) {
                        case 1:
                            dessinerPasserelles(i,j);
                            break;
                    }
                }
            }
        }

        // Pour dessiner l'image de fond
        function dessinerPasserelles(intY,intX) {
            objC2D.save();
            var objPasserelle = tabObjets[intY][intX];
            intPosX = objPasserelle.intX * 30;
            intPosY = objPasserelle.intY * 30;
            objC2D.fillStyle = objPasserelle.strCouleurPrim;
            objC2D.fillRect(intPosX,intPosY,objPasserelle.intLargeur,objPasserelle.intHauteur);
            objC2D.strokeStyle = objPasserelle.strCouleurSec;
            objC2D.fillStyle = objPasserelle.strCouleurSec;
            objC2D.lineWidth = 2;
            objC2D.translate(intPosX,intPosY);
            objC2D.strokeRect(1,0,objPasserelle.intLargeur -2,objPasserelle.intHauteur/2);
            objC2D.beginPath();
            objC2D.moveTo(0,objPasserelle.intHauteur);
            objC2D.lineTo(objPasserelle.intLargeur,objPasserelle.intHauteur);
            objC2D.stroke();
            objC2D.beginPath();
            objC2D.moveTo(objPasserelle.intLargeur/2,objPasserelle.intHauteur/2);
            objC2D.lineTo(objPasserelle.intLargeur/2,objPasserelle.intHauteur);
            objC2D.stroke();
            objC2D.fillRect(objPasserelle.intLargeur/2,objPasserelle.intHauteur/2,3,objPasserelle.intHauteur/2);
            objC2D.restore();
        }

    </script>
</head>

<body onload="initAnimation()">
    <canvas id="monCanvas" width="750" height="510" tabIndex="1" class="sCanvas">
        Votre navigateur ne supporte pas la balise canvas
    </canvas>
</body>

</html>